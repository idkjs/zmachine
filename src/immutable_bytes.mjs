// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Type from "./type.mjs";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Utility from "./utility.mjs";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_string from "bs-platform/lib/es6/caml_string.js";

function make(bytes) {
  return {
          original_bytes: bytes,
          edits: Type.IntMap.empty
        };
}

function size(bytes) {
  return bytes.original_bytes.length;
}

function read_byte(bytes, address) {
  if (Utility.is_out_of_range(address, bytes.original_bytes.length)) {
    return Pervasives.failwith("address is out of range");
  }
  var addr = address._0;
  if (Curry._2(Type.IntMap.mem, addr, bytes.edits)) {
    return Curry._2(Type.IntMap.find, addr, bytes.edits);
  } else {
    return Caml_string.get(bytes.original_bytes, addr);
  }
}

function write_byte(bytes, address, value) {
  if (Utility.is_out_of_range(address, bytes.original_bytes.length)) {
    return Pervasives.failwith("address is out of range");
  }
  var b = Pervasives.char_of_int(Utility.byte_of_int(value));
  return {
          original_bytes: bytes.original_bytes,
          edits: Curry._3(Type.IntMap.add, address._0, b, bytes.edits)
        };
}

function original(bytes) {
  return {
          original_bytes: bytes.original_bytes,
          edits: Type.IntMap.empty
        };
}

export {
  make ,
  size ,
  read_byte ,
  write_byte ,
  original ,
  
}
/* Type Not a pure module */
