// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "bs-platform/lib/es6/pervasives.js";

function fetch_bit(n, word) {
  var n$1 = n._0;
  return (((word & (1 << n$1)) >>> n$1) | 0) === 1;
}

function clear_bit(n, word) {
  return word & Pervasives.lnot((1 << n._0));
}

function set_bit(n, word) {
  return word | (1 << n._0);
}

function set_bit_to(n, word, value) {
  if (value) {
    return set_bit(n, word);
  } else {
    return clear_bit(n, word);
  }
}

function fetch_bits(high, length, word) {
  var length$1 = length._0;
  var mask = Pervasives.lnot((-1 << length$1));
  return (word >>> ((high._0 - length$1 | 0) + 1 | 0)) & mask;
}

function byte_of_int(x) {
  return x & 255;
}

function is_in_range(address, size) {
  var address$1 = address._0;
  if (0 <= address$1) {
    return address$1 < size;
  } else {
    return false;
  }
}

function is_out_of_range(address, size) {
  return !is_in_range(address, size);
}

var bit0 = /* Bit_number */{
  _0: 0
};

var bit1 = /* Bit_number */{
  _0: 1
};

var bit2 = /* Bit_number */{
  _0: 2
};

var bit3 = /* Bit_number */{
  _0: 3
};

var bit4 = /* Bit_number */{
  _0: 4
};

var bit5 = /* Bit_number */{
  _0: 5
};

var bit6 = /* Bit_number */{
  _0: 6
};

var bit7 = /* Bit_number */{
  _0: 7
};

var bit8 = /* Bit_number */{
  _0: 8
};

var bit9 = /* Bit_number */{
  _0: 9
};

var bit10 = /* Bit_number */{
  _0: 10
};

var bit11 = /* Bit_number */{
  _0: 11
};

var bit12 = /* Bit_number */{
  _0: 12
};

var bit13 = /* Bit_number */{
  _0: 13
};

var bit14 = /* Bit_number */{
  _0: 14
};

var bit15 = /* Bit_number */{
  _0: 15
};

var size1 = /* Bit_size */{
  _0: 1
};

var size2 = /* Bit_size */{
  _0: 2
};

var size3 = /* Bit_size */{
  _0: 3
};

var size4 = /* Bit_size */{
  _0: 4
};

var size5 = /* Bit_size */{
  _0: 5
};

var size6 = /* Bit_size */{
  _0: 6
};

var size7 = /* Bit_size */{
  _0: 7
};

export {
  bit0 ,
  bit1 ,
  bit2 ,
  bit3 ,
  bit4 ,
  bit5 ,
  bit6 ,
  bit7 ,
  bit8 ,
  bit9 ,
  bit10 ,
  bit11 ,
  bit12 ,
  bit13 ,
  bit14 ,
  bit15 ,
  size1 ,
  size2 ,
  size3 ,
  size4 ,
  size5 ,
  size6 ,
  size7 ,
  fetch_bit ,
  clear_bit ,
  set_bit ,
  set_bit_to ,
  fetch_bits ,
  byte_of_int ,
  is_in_range ,
  is_out_of_range ,
  
}
/* No side effect */
